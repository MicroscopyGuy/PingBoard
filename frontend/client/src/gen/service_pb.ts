// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file service.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum Quantum
 */
export enum Quantum {
  /**
   * @generated from enum value: Length = 0;
   */
  Length = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(Quantum)
proto3.util.setEnumType(Quantum, "Quantum", [
  { no: 0, name: "Length" },
]);

/**
 * @generated from enum Metric
 */
export enum Metric {
  /**
   * @generated from enum value: LATENCY = 0;
   */
  LATENCY = 0,

  /**
   * @generated from enum value: PACKET_LOSS = 1;
   */
  PACKET_LOSS = 1,

  /**
   * @generated from enum value: JITTER = 2;
   */
  JITTER = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Metric)
proto3.util.setEnumType(Metric, "Metric", [
  { no: 0, name: "LATENCY" },
  { no: 1, name: "PACKET_LOSS" },
  { no: 2, name: "JITTER" },
]);

/**
 * @generated from enum Statistic
 */
export enum Statistic {
  /**
   * @generated from enum value: MIN = 0;
   */
  MIN = 0,

  /**
   * @generated from enum value: AVG = 1;
   */
  AVG = 1,

  /**
   * @generated from enum value: MAX = 2;
   */
  MAX = 2,

  /**
   * @generated from enum value: P90 = 3;
   */
  P90 = 3,

  /**
   * @generated from enum value: P99 = 4;
   */
  P99 = 4,

  /**
   * @generated from enum value: SUM = 5;
   */
  SUM = 5,

  /**
   * @generated from enum value: COUNT = 6;
   */
  COUNT = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(Statistic)
proto3.util.setEnumType(Statistic, "Statistic", [
  { no: 0, name: "MIN" },
  { no: 1, name: "AVG" },
  { no: 2, name: "MAX" },
  { no: 3, name: "P90" },
  { no: 4, name: "P99" },
  { no: 5, name: "SUM" },
  { no: 6, name: "COUNT" },
]);

/**
 * @generated from message StartPingingRequest
 */
export class StartPingingRequest extends Message<StartPingingRequest> {
  /**
   * @generated from field: PingTarget target = 1;
   */
  target?: PingTarget;

  constructor(data?: PartialMessage<StartPingingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "StartPingingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "message", T: PingTarget },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartPingingRequest {
    return new StartPingingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartPingingRequest {
    return new StartPingingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartPingingRequest {
    return new StartPingingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartPingingRequest | PlainMessage<StartPingingRequest> | undefined, b: StartPingingRequest | PlainMessage<StartPingingRequest> | undefined): boolean {
    return proto3.util.equals(StartPingingRequest, a, b);
  }
}

/**
 * @generated from message PingTarget
 */
export class PingTarget extends Message<PingTarget> {
  /**
   * @generated from field: string target = 1;
   */
  target = "";

  constructor(data?: PartialMessage<PingTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PingTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingTarget {
    return new PingTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingTarget {
    return new PingTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingTarget {
    return new PingTarget().fromJsonString(jsonString, options);
  }

  static equals(a: PingTarget | PlainMessage<PingTarget> | undefined, b: PingTarget | PlainMessage<PingTarget> | undefined): boolean {
    return proto3.util.equals(PingTarget, a, b);
  }
}

/**
 * @generated from message PingGroupSummaryPublic
 */
export class PingGroupSummaryPublic extends Message<PingGroupSummaryPublic> {
  /**
   * @generated from field: google.protobuf.Timestamp start = 1;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end = 2;
   */
  end?: Timestamp;

  /**
   * @generated from field: string target = 3;
   */
  target = "";

  /**
   * @generated from field: int32 minimumPing = 4;
   */
  minimumPing = 0;

  /**
   * @generated from field: float averagePing = 5;
   */
  averagePing = 0;

  /**
   * @generated from field: int32 maximumPing = 6;
   */
  maximumPing = 0;

  /**
   * @generated from field: float jitter = 7;
   */
  jitter = 0;

  /**
   * @generated from field: float packetLoss = 8;
   */
  packetLoss = 0;

  /**
   * @generated from field: optional string terminatingIPStatusExplanation = 9;
   */
  terminatingIPStatusExplanation?: string;

  /**
   * @generated from field: optional string lastAbnormalStatusExplanation = 10;
   */
  lastAbnormalStatusExplanation?: string;

  constructor(data?: PartialMessage<PingGroupSummaryPublic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PingGroupSummaryPublic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: Timestamp },
    { no: 2, name: "end", kind: "message", T: Timestamp },
    { no: 3, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "minimumPing", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "averagePing", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "maximumPing", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "jitter", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 8, name: "packetLoss", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 9, name: "terminatingIPStatusExplanation", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "lastAbnormalStatusExplanation", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingGroupSummaryPublic {
    return new PingGroupSummaryPublic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingGroupSummaryPublic {
    return new PingGroupSummaryPublic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingGroupSummaryPublic {
    return new PingGroupSummaryPublic().fromJsonString(jsonString, options);
  }

  static equals(a: PingGroupSummaryPublic | PlainMessage<PingGroupSummaryPublic> | undefined, b: PingGroupSummaryPublic | PlainMessage<PingGroupSummaryPublic> | undefined): boolean {
    return proto3.util.equals(PingGroupSummaryPublic, a, b);
  }
}

/**
 * @generated from message ShowPingsRequest
 */
export class ShowPingsRequest extends Message<ShowPingsRequest> {
  /**
   * @generated from field: PingTarget target = 1;
   */
  target?: PingTarget;

  /**
   * @generated from field: google.protobuf.Timestamp startingTime = 2;
   */
  startingTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp endingTime = 3;
   */
  endingTime?: Timestamp;

  constructor(data?: PartialMessage<ShowPingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ShowPingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "message", T: PingTarget },
    { no: 2, name: "startingTime", kind: "message", T: Timestamp },
    { no: 3, name: "endingTime", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShowPingsRequest {
    return new ShowPingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShowPingsRequest {
    return new ShowPingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShowPingsRequest {
    return new ShowPingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ShowPingsRequest | PlainMessage<ShowPingsRequest> | undefined, b: ShowPingsRequest | PlainMessage<ShowPingsRequest> | undefined): boolean {
    return proto3.util.equals(ShowPingsRequest, a, b);
  }
}

/**
 * @generated from message ShowPingsResponse
 */
export class ShowPingsResponse extends Message<ShowPingsResponse> {
  /**
   * @generated from field: repeated PingGroupSummaryPublic pings = 1;
   */
  pings: PingGroupSummaryPublic[] = [];

  constructor(data?: PartialMessage<ShowPingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ShowPingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pings", kind: "message", T: PingGroupSummaryPublic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShowPingsResponse {
    return new ShowPingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShowPingsResponse {
    return new ShowPingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShowPingsResponse {
    return new ShowPingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ShowPingsResponse | PlainMessage<ShowPingsResponse> | undefined, b: ShowPingsResponse | PlainMessage<ShowPingsResponse> | undefined): boolean {
    return proto3.util.equals(ShowPingsResponse, a, b);
  }
}

/**
 * @generated from message ListPingsRequest
 */
export class ListPingsRequest extends Message<ListPingsRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp startingTime = 1;
   */
  startingTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp endingTime = 2;
   */
  endingTime?: Timestamp;

  /**
   * @generated from field: PingTarget pingTarget = 4;
   */
  pingTarget?: PingTarget;

  /**
   * @generated from field: Metric metric = 5;
   */
  metric = Metric.LATENCY;

  /**
   * @generated from field: Statistic statistic = 6;
   */
  statistic = Statistic.MIN;

  /**
   * @generated from field: optional Quantum quantum = 7;
   */
  quantum?: Quantum;

  constructor(data?: PartialMessage<ListPingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListPingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "startingTime", kind: "message", T: Timestamp },
    { no: 2, name: "endingTime", kind: "message", T: Timestamp },
    { no: 4, name: "pingTarget", kind: "message", T: PingTarget },
    { no: 5, name: "metric", kind: "enum", T: proto3.getEnumType(Metric) },
    { no: 6, name: "statistic", kind: "enum", T: proto3.getEnumType(Statistic) },
    { no: 7, name: "quantum", kind: "enum", T: proto3.getEnumType(Quantum), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPingsRequest {
    return new ListPingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPingsRequest {
    return new ListPingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPingsRequest {
    return new ListPingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPingsRequest | PlainMessage<ListPingsRequest> | undefined, b: ListPingsRequest | PlainMessage<ListPingsRequest> | undefined): boolean {
    return proto3.util.equals(ListPingsRequest, a, b);
  }
}

/**
 * @generated from message ListPingsDatapoint
 */
export class ListPingsDatapoint extends Message<ListPingsDatapoint> {
  /**
   * @generated from field: google.protobuf.Timestamp Timestamp = 1;
   */
  Timestamp?: Timestamp;

  /**
   * @generated from field: double Value = 2;
   */
  Value = 0;

  constructor(data?: PartialMessage<ListPingsDatapoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListPingsDatapoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "Value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPingsDatapoint {
    return new ListPingsDatapoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPingsDatapoint {
    return new ListPingsDatapoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPingsDatapoint {
    return new ListPingsDatapoint().fromJsonString(jsonString, options);
  }

  static equals(a: ListPingsDatapoint | PlainMessage<ListPingsDatapoint> | undefined, b: ListPingsDatapoint | PlainMessage<ListPingsDatapoint> | undefined): boolean {
    return proto3.util.equals(ListPingsDatapoint, a, b);
  }
}

/**
 * @generated from message ListPingsResponse
 */
export class ListPingsResponse extends Message<ListPingsResponse> {
  /**
   * @generated from field: repeated ListPingsDatapoint datapoints = 1;
   */
  datapoints: ListPingsDatapoint[] = [];

  constructor(data?: PartialMessage<ListPingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListPingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "datapoints", kind: "message", T: ListPingsDatapoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPingsResponse {
    return new ListPingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPingsResponse {
    return new ListPingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPingsResponse {
    return new ListPingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPingsResponse | PlainMessage<ListPingsResponse> | undefined, b: ListPingsResponse | PlainMessage<ListPingsResponse> | undefined): boolean {
    return proto3.util.equals(ListPingsResponse, a, b);
  }
}

/**
 * @generated from message ListAnomaliesRequest
 */
export class ListAnomaliesRequest extends Message<ListAnomaliesRequest> {
  /**
   * @generated from field: uint32 numberRequested = 1;
   */
  numberRequested = 0;

  /**
   * @generated from field: string paginationToken = 2;
   */
  paginationToken = "";

  /**
   * @generated from field: optional PingTarget pingTarget = 3;
   */
  pingTarget?: PingTarget;

  constructor(data?: PartialMessage<ListAnomaliesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListAnomaliesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numberRequested", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "paginationToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pingTarget", kind: "message", T: PingTarget, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAnomaliesRequest {
    return new ListAnomaliesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAnomaliesRequest {
    return new ListAnomaliesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAnomaliesRequest {
    return new ListAnomaliesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAnomaliesRequest | PlainMessage<ListAnomaliesRequest> | undefined, b: ListAnomaliesRequest | PlainMessage<ListAnomaliesRequest> | undefined): boolean {
    return proto3.util.equals(ListAnomaliesRequest, a, b);
  }
}

/**
 * @generated from message ListAnomaliesResponse
 */
export class ListAnomaliesResponse extends Message<ListAnomaliesResponse> {
  /**
   * @generated from field: repeated PingGroupSummaryPublic anomalies = 1;
   */
  anomalies: PingGroupSummaryPublic[] = [];

  /**
   * @generated from field: string paginationToken = 2;
   */
  paginationToken = "";

  constructor(data?: PartialMessage<ListAnomaliesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListAnomaliesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "anomalies", kind: "message", T: PingGroupSummaryPublic, repeated: true },
    { no: 2, name: "paginationToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAnomaliesResponse {
    return new ListAnomaliesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAnomaliesResponse {
    return new ListAnomaliesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAnomaliesResponse {
    return new ListAnomaliesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAnomaliesResponse | PlainMessage<ListAnomaliesResponse> | undefined, b: ListAnomaliesResponse | PlainMessage<ListAnomaliesResponse> | undefined): boolean {
    return proto3.util.equals(ListAnomaliesResponse, a, b);
  }
}

/**
 * @generated from message ServerEvent
 */
export class ServerEvent extends Message<ServerEvent> {
  /**
   * @generated from field: google.protobuf.Timestamp eventTime = 1;
   */
  eventTime?: Timestamp;

  /**
   * @generated from oneof ServerEvent.ServerEvent
   */
  ServerEvent: {
    /**
     * @generated from field: ServerEvent.PingOnOffToggle pingOnOffToggle = 100;
     */
    value: ServerEvent_PingOnOffToggle;
    case: "pingOnOffToggle";
  } | {
    /**
     * @generated from field: ServerEvent.PingAnomaly pingAnomaly = 101;
     */
    value: ServerEvent_PingAnomaly;
    case: "pingAnomaly";
  } | {
    /**
     * @generated from field: ServerEvent.PingInfo pingInfo = 102;
     */
    value: ServerEvent_PingInfo;
    case: "pingInfo";
  } | {
    /**
     * @generated from field: ServerEvent.PingAgentError pingAgentError = 190;
     */
    value: ServerEvent_PingAgentError;
    case: "pingAgentError";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ServerEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ServerEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "eventTime", kind: "message", T: Timestamp },
    { no: 100, name: "pingOnOffToggle", kind: "message", T: ServerEvent_PingOnOffToggle, oneof: "ServerEvent" },
    { no: 101, name: "pingAnomaly", kind: "message", T: ServerEvent_PingAnomaly, oneof: "ServerEvent" },
    { no: 102, name: "pingInfo", kind: "message", T: ServerEvent_PingInfo, oneof: "ServerEvent" },
    { no: 190, name: "pingAgentError", kind: "message", T: ServerEvent_PingAgentError, oneof: "ServerEvent" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerEvent {
    return new ServerEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerEvent {
    return new ServerEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerEvent {
    return new ServerEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ServerEvent | PlainMessage<ServerEvent> | undefined, b: ServerEvent | PlainMessage<ServerEvent> | undefined): boolean {
    return proto3.util.equals(ServerEvent, a, b);
  }
}

/**
 * @generated from message ServerEvent.PingOnOffToggle
 */
export class ServerEvent_PingOnOffToggle extends Message<ServerEvent_PingOnOffToggle> {
  /**
   * @generated from field: PingTarget pingTarget = 1;
   */
  pingTarget?: PingTarget;

  /**
   * @generated from field: bool active = 2;
   */
  active = false;

  constructor(data?: PartialMessage<ServerEvent_PingOnOffToggle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ServerEvent.PingOnOffToggle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pingTarget", kind: "message", T: PingTarget },
    { no: 2, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerEvent_PingOnOffToggle {
    return new ServerEvent_PingOnOffToggle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerEvent_PingOnOffToggle {
    return new ServerEvent_PingOnOffToggle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerEvent_PingOnOffToggle {
    return new ServerEvent_PingOnOffToggle().fromJsonString(jsonString, options);
  }

  static equals(a: ServerEvent_PingOnOffToggle | PlainMessage<ServerEvent_PingOnOffToggle> | undefined, b: ServerEvent_PingOnOffToggle | PlainMessage<ServerEvent_PingOnOffToggle> | undefined): boolean {
    return proto3.util.equals(ServerEvent_PingOnOffToggle, a, b);
  }
}

/**
 * @generated from message ServerEvent.PingAnomaly
 */
export class ServerEvent_PingAnomaly extends Message<ServerEvent_PingAnomaly> {
  /**
   * @generated from field: PingTarget pingTarget = 1;
   */
  pingTarget?: PingTarget;

  /**
   * @generated from field: string anomalyDescription = 2;
   */
  anomalyDescription = "";

  constructor(data?: PartialMessage<ServerEvent_PingAnomaly>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ServerEvent.PingAnomaly";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pingTarget", kind: "message", T: PingTarget },
    { no: 2, name: "anomalyDescription", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerEvent_PingAnomaly {
    return new ServerEvent_PingAnomaly().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerEvent_PingAnomaly {
    return new ServerEvent_PingAnomaly().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerEvent_PingAnomaly {
    return new ServerEvent_PingAnomaly().fromJsonString(jsonString, options);
  }

  static equals(a: ServerEvent_PingAnomaly | PlainMessage<ServerEvent_PingAnomaly> | undefined, b: ServerEvent_PingAnomaly | PlainMessage<ServerEvent_PingAnomaly> | undefined): boolean {
    return proto3.util.equals(ServerEvent_PingAnomaly, a, b);
  }
}

/**
 * @generated from message ServerEvent.PingAgentError
 */
export class ServerEvent_PingAgentError extends Message<ServerEvent_PingAgentError> {
  /**
   * @generated from field: PingTarget pingTarget = 1;
   */
  pingTarget?: PingTarget;

  /**
   * @generated from field: string errorDescription = 2;
   */
  errorDescription = "";

  constructor(data?: PartialMessage<ServerEvent_PingAgentError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ServerEvent.PingAgentError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pingTarget", kind: "message", T: PingTarget },
    { no: 2, name: "errorDescription", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerEvent_PingAgentError {
    return new ServerEvent_PingAgentError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerEvent_PingAgentError {
    return new ServerEvent_PingAgentError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerEvent_PingAgentError {
    return new ServerEvent_PingAgentError().fromJsonString(jsonString, options);
  }

  static equals(a: ServerEvent_PingAgentError | PlainMessage<ServerEvent_PingAgentError> | undefined, b: ServerEvent_PingAgentError | PlainMessage<ServerEvent_PingAgentError> | undefined): boolean {
    return proto3.util.equals(ServerEvent_PingAgentError, a, b);
  }
}

/**
 * @generated from message ServerEvent.PingInfo
 */
export class ServerEvent_PingInfo extends Message<ServerEvent_PingInfo> {
  /**
   * @generated from field: PingTarget pingTarget = 1;
   */
  pingTarget?: PingTarget;

  constructor(data?: PartialMessage<ServerEvent_PingInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ServerEvent.PingInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pingTarget", kind: "message", T: PingTarget },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerEvent_PingInfo {
    return new ServerEvent_PingInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerEvent_PingInfo {
    return new ServerEvent_PingInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerEvent_PingInfo {
    return new ServerEvent_PingInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ServerEvent_PingInfo | PlainMessage<ServerEvent_PingInfo> | undefined, b: ServerEvent_PingInfo | PlainMessage<ServerEvent_PingInfo> | undefined): boolean {
    return proto3.util.equals(ServerEvent_PingInfo, a, b);
  }
}

