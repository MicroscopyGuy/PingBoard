// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file service.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message PingTarget
 */
export class PingTarget extends Message<PingTarget> {
  /**
   * @generated from field: string target = 1;
   */
  target = "";

  constructor(data?: PartialMessage<PingTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PingTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingTarget {
    return new PingTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingTarget {
    return new PingTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingTarget {
    return new PingTarget().fromJsonString(jsonString, options);
  }

  static equals(a: PingTarget | PlainMessage<PingTarget> | undefined, b: PingTarget | PlainMessage<PingTarget> | undefined): boolean {
    return proto3.util.equals(PingTarget, a, b);
  }
}

/**
 * @generated from message PingGroupSummaryPublic
 */
export class PingGroupSummaryPublic extends Message<PingGroupSummaryPublic> {
  /**
   * @generated from field: google.protobuf.Timestamp start = 1;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end = 2;
   */
  end?: Timestamp;

  /**
   * @generated from field: string target = 3;
   */
  target = "";

  /**
   * @generated from field: int32 minimumPing = 4;
   */
  minimumPing = 0;

  /**
   * @generated from field: float averagePing = 5;
   */
  averagePing = 0;

  /**
   * @generated from field: int32 maximumPing = 6;
   */
  maximumPing = 0;

  /**
   * @generated from field: float jitter = 7;
   */
  jitter = 0;

  /**
   * @generated from field: float packetLoss = 8;
   */
  packetLoss = 0;

  /**
   * @generated from field: optional string terminatingIPStatusExplanation = 9;
   */
  terminatingIPStatusExplanation?: string;

  /**
   * @generated from field: optional string lastAbnormalStatusExplanation = 10;
   */
  lastAbnormalStatusExplanation?: string;

  constructor(data?: PartialMessage<PingGroupSummaryPublic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PingGroupSummaryPublic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: Timestamp },
    { no: 2, name: "end", kind: "message", T: Timestamp },
    { no: 3, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "minimumPing", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "averagePing", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "maximumPing", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "jitter", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 8, name: "packetLoss", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 9, name: "terminatingIPStatusExplanation", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "lastAbnormalStatusExplanation", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingGroupSummaryPublic {
    return new PingGroupSummaryPublic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingGroupSummaryPublic {
    return new PingGroupSummaryPublic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingGroupSummaryPublic {
    return new PingGroupSummaryPublic().fromJsonString(jsonString, options);
  }

  static equals(a: PingGroupSummaryPublic | PlainMessage<PingGroupSummaryPublic> | undefined, b: PingGroupSummaryPublic | PlainMessage<PingGroupSummaryPublic> | undefined): boolean {
    return proto3.util.equals(PingGroupSummaryPublic, a, b);
  }
}

/**
 * @generated from message PingAnomalies
 */
export class PingAnomalies extends Message<PingAnomalies> {
  /**
   * @generated from field: repeated PingGroupSummaryPublic pingAnomaly = 1;
   */
  pingAnomaly: PingGroupSummaryPublic[] = [];

  constructor(data?: PartialMessage<PingAnomalies>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PingAnomalies";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pingAnomaly", kind: "message", T: PingGroupSummaryPublic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingAnomalies {
    return new PingAnomalies().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingAnomalies {
    return new PingAnomalies().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingAnomalies {
    return new PingAnomalies().fromJsonString(jsonString, options);
  }

  static equals(a: PingAnomalies | PlainMessage<PingAnomalies> | undefined, b: PingAnomalies | PlainMessage<PingAnomalies> | undefined): boolean {
    return proto3.util.equals(PingAnomalies, a, b);
  }
}

/**
 * @generated from message PingStatusMessage
 */
export class PingStatusMessage extends Message<PingStatusMessage> {
  /**
   * @generated from field: PingTarget pingTarget = 1;
   */
  pingTarget?: PingTarget;

  /**
   * @generated from field: bool active = 2;
   */
  active = false;

  constructor(data?: PartialMessage<PingStatusMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PingStatusMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pingTarget", kind: "message", T: PingTarget },
    { no: 2, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingStatusMessage {
    return new PingStatusMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingStatusMessage {
    return new PingStatusMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingStatusMessage {
    return new PingStatusMessage().fromJsonString(jsonString, options);
  }

  static equals(a: PingStatusMessage | PlainMessage<PingStatusMessage> | undefined, b: PingStatusMessage | PlainMessage<PingStatusMessage> | undefined): boolean {
    return proto3.util.equals(PingStatusMessage, a, b);
  }
}

/**
 * @generated from message AnomalyNotification
 */
export class AnomalyNotification extends Message<AnomalyNotification> {
  /**
   * @generated from field: PingTarget pingTarget = 1;
   */
  pingTarget?: PingTarget;

  /**
   * @generated from field: string anomalyDescription = 2;
   */
  anomalyDescription = "";

  constructor(data?: PartialMessage<AnomalyNotification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "AnomalyNotification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pingTarget", kind: "message", T: PingTarget },
    { no: 2, name: "anomalyDescription", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnomalyNotification {
    return new AnomalyNotification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnomalyNotification {
    return new AnomalyNotification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnomalyNotification {
    return new AnomalyNotification().fromJsonString(jsonString, options);
  }

  static equals(a: AnomalyNotification | PlainMessage<AnomalyNotification> | undefined, b: AnomalyNotification | PlainMessage<AnomalyNotification> | undefined): boolean {
    return proto3.util.equals(AnomalyNotification, a, b);
  }
}

/**
 * @generated from message ServerEvent
 */
export class ServerEvent extends Message<ServerEvent> {
  /**
   * @generated from field: google.protobuf.Timestamp eventTime = 1;
   */
  eventTime?: Timestamp;

  /**
   * @generated from oneof ServerEvent.ServerEvent
   */
  ServerEvent: {
    /**
     * @generated from field: ServerEvent.PingOnOffToggle pingOnOffToggle = 100;
     */
    value: ServerEvent_PingOnOffToggle;
    case: "pingOnOffToggle";
  } | {
    /**
     * @generated from field: ServerEvent.PingAnomaly pingAnomaly = 101;
     */
    value: ServerEvent_PingAnomaly;
    case: "pingAnomaly";
  } | {
    /**
     * @generated from field: ServerEvent.PingAgentError pingAgentError = 190;
     */
    value: ServerEvent_PingAgentError;
    case: "pingAgentError";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ServerEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ServerEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "eventTime", kind: "message", T: Timestamp },
    { no: 100, name: "pingOnOffToggle", kind: "message", T: ServerEvent_PingOnOffToggle, oneof: "ServerEvent" },
    { no: 101, name: "pingAnomaly", kind: "message", T: ServerEvent_PingAnomaly, oneof: "ServerEvent" },
    { no: 190, name: "pingAgentError", kind: "message", T: ServerEvent_PingAgentError, oneof: "ServerEvent" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerEvent {
    return new ServerEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerEvent {
    return new ServerEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerEvent {
    return new ServerEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ServerEvent | PlainMessage<ServerEvent> | undefined, b: ServerEvent | PlainMessage<ServerEvent> | undefined): boolean {
    return proto3.util.equals(ServerEvent, a, b);
  }
}

/**
 * @generated from message ServerEvent.PingOnOffToggle
 */
export class ServerEvent_PingOnOffToggle extends Message<ServerEvent_PingOnOffToggle> {
  /**
   * @generated from field: PingTarget pingTarget = 1;
   */
  pingTarget?: PingTarget;

  /**
   * @generated from field: bool active = 2;
   */
  active = false;

  constructor(data?: PartialMessage<ServerEvent_PingOnOffToggle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ServerEvent.PingOnOffToggle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pingTarget", kind: "message", T: PingTarget },
    { no: 2, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerEvent_PingOnOffToggle {
    return new ServerEvent_PingOnOffToggle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerEvent_PingOnOffToggle {
    return new ServerEvent_PingOnOffToggle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerEvent_PingOnOffToggle {
    return new ServerEvent_PingOnOffToggle().fromJsonString(jsonString, options);
  }

  static equals(a: ServerEvent_PingOnOffToggle | PlainMessage<ServerEvent_PingOnOffToggle> | undefined, b: ServerEvent_PingOnOffToggle | PlainMessage<ServerEvent_PingOnOffToggle> | undefined): boolean {
    return proto3.util.equals(ServerEvent_PingOnOffToggle, a, b);
  }
}

/**
 * @generated from message ServerEvent.PingAnomaly
 */
export class ServerEvent_PingAnomaly extends Message<ServerEvent_PingAnomaly> {
  /**
   * @generated from field: PingTarget pingTarget = 1;
   */
  pingTarget?: PingTarget;

  /**
   * @generated from field: string anomalyDescription = 2;
   */
  anomalyDescription = "";

  constructor(data?: PartialMessage<ServerEvent_PingAnomaly>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ServerEvent.PingAnomaly";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pingTarget", kind: "message", T: PingTarget },
    { no: 2, name: "anomalyDescription", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerEvent_PingAnomaly {
    return new ServerEvent_PingAnomaly().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerEvent_PingAnomaly {
    return new ServerEvent_PingAnomaly().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerEvent_PingAnomaly {
    return new ServerEvent_PingAnomaly().fromJsonString(jsonString, options);
  }

  static equals(a: ServerEvent_PingAnomaly | PlainMessage<ServerEvent_PingAnomaly> | undefined, b: ServerEvent_PingAnomaly | PlainMessage<ServerEvent_PingAnomaly> | undefined): boolean {
    return proto3.util.equals(ServerEvent_PingAnomaly, a, b);
  }
}

/**
 * @generated from message ServerEvent.PingAgentError
 */
export class ServerEvent_PingAgentError extends Message<ServerEvent_PingAgentError> {
  /**
   * @generated from field: PingTarget pingTarget = 1;
   */
  pingTarget?: PingTarget;

  /**
   * @generated from field: string errorDescription = 2;
   */
  errorDescription = "";

  constructor(data?: PartialMessage<ServerEvent_PingAgentError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ServerEvent.PingAgentError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pingTarget", kind: "message", T: PingTarget },
    { no: 2, name: "errorDescription", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerEvent_PingAgentError {
    return new ServerEvent_PingAgentError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerEvent_PingAgentError {
    return new ServerEvent_PingAgentError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerEvent_PingAgentError {
    return new ServerEvent_PingAgentError().fromJsonString(jsonString, options);
  }

  static equals(a: ServerEvent_PingAgentError | PlainMessage<ServerEvent_PingAgentError> | undefined, b: ServerEvent_PingAgentError | PlainMessage<ServerEvent_PingAgentError> | undefined): boolean {
    return proto3.util.equals(ServerEvent_PingAgentError, a, b);
  }
}

